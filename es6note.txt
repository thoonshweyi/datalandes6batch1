=>JAVASCRIPT ES6

     =Diff var, let, const
          =>Declaration
               var x = 100;
               x = 200;
               var x = 300;
               console.log(x);

               let y = 100;
                    y = 200;
               let y = 300;        // VM60:3 Uncaught SyntaxError: Identifier 'y' has already been declared
               console.log(y);     


               const p = 100;
                    p = 200;       // VM64:2 Uncaught TypeError: Assignment to constant variable.
               const p = 300;      // Uncaught SyntaxError: Identifier 'p' has already been declared
               console.log(p); 


                              var       let       const
               ----------------------------------------
               Redeclare      -         x         x
               Overwrite      -         -         x
          =>Scope

               if(true){
                    // Global & Function Scope
                    var num1 = 100;

                    // Block Scope
                    let num2 = 200;
                    const num3 = 300;
               }
               console.log(num1);       // 100
               // console.log(num2);    // Uncaught ReferenceError: num2 is not defined
               console.log(num3);       // Uncaught ReferenceError: num3 is not defined


               function printone(){
                    for(var x=0; x<5; x++){
                         console.log(x);
                    }
                    console.log("x value is = ",x);
               }
               printone(); // 0 1 2 3 4 x=5

               function printtwo(){
                    for(let q=0; q<5; q++){
                         console.log(q);
                    }
                    console.log("q value is = ",q);
               }
               printtwo(); // 0 1 2 3 4 Uncaught ReferenceError: q is not defined

               function printthree(){
                    for(const b=0; b<5; b++){
                         console.log(b);
                    }
                    console.log("b value is = ",b);
               }
               printthree(); // 0 Uncaught TypeError: Assignment to constant variable.

                              var       let       const
               ----------------------------------------
               Scope          G         B         B

               Global & Function Scope
               Block Scope

     =>Array
          onst arrcolors = ["red","green","blue"];
          console.log(arrcolors);                      // ['red', 'green', 'blue']
          arrcolors.push("black","white","grey");
          console.log(arrcolors);                      // ['red', 'green', 'blue', 'black', 'white', 'grey']
     
     =>Object
          const person = {
               name : "Aung Aung",
               bio: function(){
                    console.log("this is bio");
               },
               contact(){
                    console.log("this is contact");
               }
          }
          console.log(person);
          console.log(person.name);     // Dot Notation for Object Properties
          console.log(person["name"]);  // Bracket Notation for Object Properties
          console.log(person.bio());
          // console.log(person[bio()]); // error
          console.log(person.contact());

          person.name = "Maung Maung";
          console.log(person.name);     // Maung Maung
          console.log(person["name"]);     // Maung Maung

          const othername = "name";
          person[othername] = "Kyaw Kyaw";
          console.log(person.name);     // Kyaw Kyaw
          console.log(person["name"]);     // Kyaw Kyaw

          =Accessing Object
               Dot Notation        Bracket Notation
               ------------------------------------
               Peoperty            Property
               Function Call       Variable Property

     => Template Literals

          let num1 = 100;
          let num2 = 200;
          console.log(`${num1+num2}`); // 300
          console.log(`${num1 > num2 ? "Yes" : "No"}`); // No

     =>Arrow Function
          let getfullname = function(){
                    let firstname = "Aung";
                    let lastname = "Tun Tun";
                    return `${firstname} ${lastname}`;
               }
          console.log(getfullname());

          let getnum = ()=>{
               let num1 = 200;
               return num1;
          }
          console.log(getnum());

          const sayname = name=>{
               alert(`${name}`)
          }
          sayname("Aung Aung");

          =Shor Hand
               const saycity = (city)=>alert(`Hello ${city}`);
               saycity("Mandalay");

               const sayphone = phone=>alert(`My Phone number is ${phone}`);
               sayphone("09123456");

               -no need curly Bracket
               -no need return

          =Multi Parameter
               let firstname = "Ma Ma";
               let lastname = "Mya";

               let getnickname = (fstname,lstname)=>(`${fstname} ${lstname}`);
               getnickname = (fstname,lstname)=>`${fstname} ${lstname}`;
               getnickname = (fstname,lstname)=>fstname+" "+lstname;
               
               console.log(getnickname(firstname,lastname));

               *parameters must be in bracket

          =Default Parameter
               let getnumber = (num1=100,num2=200)=>{
                    const result = num1+num2;
                    return result;
               }

               console.log(getnumber(10,50));     // 60
               console.log(getnumber(10));        // 210
               console.log(getnumber());          // 300

     =>Iteration    
          =For, For In, For Of  Syntax
               for(let x=0; x<array.length;x++){
                    code to executed
               }

               for(let key in obj){
                    code to executed
               }

               for(let value of array){
                    code to executed
               }

          =>For Loop
               document.write("<h3>For loop</h3>");

               let mycolors = ["red","green","blue","orange","grey"];

               for(let x=0; x < mycolors.length;x++){
                    document.write(mycolors[x]+"<br/>");
               }
          
          =>For In Loop
               -more suitable for object 
               -can be used for array

               document.write("<h3>For In Loop</h3>"); 
               let customers = {
                    name:"Aung Aung",
                    city:"Mandalay",
                    parent:"U Ba",
                    phone:"09123456789"
               };

               for(let key in customers){
                    // console.log(key);
                    // console.log(customers.key) // undefined
                    // console.log(customers[key]);
                    document.write(key + " = "+customers[key]+"<br/>");
               }

               const ourteams = ["kyaw kyaw","aung aung","maung maung","kaung kaung"];

               for(idx in ourteams){
                    // console.log(idx);
                    document.write("for in loop result = "+ourteams[idx]+"<br/>");
               }

          =>For Of Loop  
               - more suitable for array
               -can be used for object

               document.write("<h3>For Of Loop</h3>"); // 
               const members = ["su su","lu lu","nu nu","yu yu"];

               for(let member of members){
                    // console.log(member);
                    document.write("for of loop result = "+member+"<br/>");
               }    

          =>Array Call Back Method

                    forEach()
                    map
                    filter
                    find
                    reduce
                    some
                    every
               
               =>forEach
                    document.write("<h3>forEach Loop</h3>");
                    const students = ["su su","lu lu","nu nu","yu yu","phu phy"];
                    students.forEach(student=>{
                         // cosole.log(student);
                         document.write("forEach loop result = "+student+"<br/>");
                    });

                    const colors = ["red","green","blue","white","black"];
                    colors.forEach((color,idx)=>{
                         // console.log(`Index number is = ${idx} Color is = ${color}`);
                         document.write(`Index number is = ${idx} Color is = ${color} <br/>`);
                    });
               
               =>map     
                    const firstnames = ["aung","kyaw","soe"];

                    const name1 = firstnames.map((firstname)=>{
                         return `${firstname} ko ko`;
                    });
                    console.log(name1);      // ['aung ko ko', 'kyaw ko ko', 'soe ko ko']
                    
                    const name2 = firstnames.map(firstname=>{
                         return `${firstname} hla`;
                    });
                    console.log(name2);

                    const name3 = firstnames.map((firstname)=>`${firstname} lwin`);
                    console.log(name3)

                    const ladies = employees.map((employee,idx)=>{
                         // console.log(employee) // string
                         return `${++idx} Ms.${employee}`;
                    });
                    console.log(ladies); // (5) ['1 Ms.su su', '2 Ms.lu lu', '3 Ms.nu nu', '4 Ms.yu yu', '5 Ms.phu phy']

                    - return an excuted array

                    => map VS forEach
                         const peoples = visitors.forEach(visitor=>{
                              return `Mr.${visitor}`;
                         });
                         console.log(peoples); // undefined

                         - forEach can only print out, can't return

               =>filter
                    document.write("<h3>Filter</h3>");
                    const ages = [20,25,21,17,35,16,50,17,11,80,10,18,12,15,37];

                    const getover18 = ages.filter(age=>{
                         return age > 18;
                    });
                    console.log(getover18); // (7) [20,25,21,35,50,80,37]
                    document.write("filter result = "+getover18 + "<br/>"); 

                    const getover20 = ages.filter(age=> age >= 20);
                    console.log(getover20); // (7) [20,25,21,35,50,80,37]

                    -return a filtered array

               =>map . filter 
                    const employers = ["su su","lu lu","nu nu","yu yu","phu phy"];
               
                    const arrs1 = employers.map(employer=>{
                         return employer;
                    });
                    console.log(arrs1);
                    const arrs2 = arrs1.filter(owner=>{
                         if(owner === "nu nu"){
                              return false;
                         }else{
                              return true;
                         }
                    });
                    console.log(arrs2);

                    const owners = employers.map(employer=>{
                         return employer;
                    }).filter(owner=>{
                         // if(owner === "nu nu"){
                         //      return false;
                         // }else{
                         //      return true;
                         // }

                         if(owner === "nu nu"){
                              return false;
                         }
                         return true;
                         
                    });
                    console.log(owners);

               =>reduce
                    =Syntax
                    mainarrays.reduce(function(previousValue,currentValue,currrentIndex,array){},initialvalue or additional value)
                    
                    const amounts = [10,20,30];
                    const result = amounts.reduce((total,curr)=>{
                         total += curr;
                         return total;
                    },0);
                    // const result = amounts.reduce((total,curr)=>{
                    //      total += curr;
                    //      return total;
                    // });
                    console.log(result); // 60

                    const sumresult = amounts.reduce((total,curr)=>(total += curr),0).toFixed(2);
                    console.log(sumresult); // 60.00
                    console.log(typeof sumresult); // string

                    =>Another Usage
                         
                         const numbers = [10,200,30,40,50,60,70,80.90,100,500,0];
                         const getresult = numbers.reduce((prev,curr)=>{
                              // =get max
                              // if(curr > prev){
                              //      return curr;
                              // }

                              // = get min
                              if(curr < prev){
                                   return curr;
                              }
                              return prev;
                         },0);
                         console.log(getresult); // 500, 0

                         =Explanation
                              max       curr      return
                              0         10        10
                              10        200       200
                              200       30        200
                              200       40        200....
                              200       500       500
                              500       0         500

               =>include
                    const animals = ["cat","dog","fish","owl","monkey",500,1000];
                    console.log(animals.includes("dog")); // true
                    console.log(animals.includes("Dog")); // false
                    console.log(animals.includes("do")); // false
                    console.log(animals.includes("owl")); // true
                    console.log(animals.includes(500)); // true
                    console.log(animals.includes('1000')); // false

                    -return boolean
                    -case sensitive

                    => filter contains include
                         const articles = [
                         {
                              title:"this is new article 1",
                              author:"u ba",
                              rating:2.8,
                              types:["book","ebook","cd"]
                         },
                         {
                              title:"this is new article 2",
                              author:"u hla",
                              rating:4.3,
                              types:["book","cd"]
                         },
                         {
                              title:"this is new article 3",
                              author:"daw mya",
                              rating:4.5,
                              types:["book","ebook","cd"]
                         },
                         {
                              title:"this is new article 4",
                              author:"daw pa",
                              rating:3.1,
                              types:["ebook","cd"]
                         },
                    ];

                    const goodratings = articles.filter(article=>article.rating > 4);
                    console.log(goodratings);

                    const getbooks = articles.filter(article=>{
                         const result = article.types.includes("book");
                         return result;
                    });
                    console.log(getbooks);

               =>every() vs some() 
                    - check every single item
                    - return boolean
                    
                    =>every()
                    true = all items match
                    false = item(s) didn't match

                    =>some()
                    true = at least one item match
                    false = all items didn't match

                    const boys = ["aung aung","kyaw aung","zin maung","soe naung"];
                    const checklength = boys.every(boy=>{
                         return boy.length === 9;
                    });
                    console.log(checklength); // true

                    let firstletterwitha = boys.every(boy=>boy[0] === "a");
                    console.log(firstletterwitha) // false

                    let lastletterwithg = boys.every(boy=>boy[boy.length-1] === "g");
                    console.log(lastletterwithg) // true

                    let fstletterwitha = boys.some(boy=>boy[0] === "a");
                    console.log(lastletterwithg) // true

     => Object
          let person1 = {
               name: "Aung Aung",
               age:20,
               gender:"male"
          };
          console.log(person1);              // Object {name: 'Aung Aung', age: 20, gender: 'male'}
          console.log(person1.name);         // Aung Aung
          console.log(person1["name"]);      // Aung Aung

          =>Object Copying & Freezing

               person1.city = "Yangon";
               console.log(person1);              // Object {name: 'Aung Aung', age: 20, gender: 'male', city: 'Yangon'}

               let person2 = person1;
               console.log(person2);              // {name: 'Aung Aung', age: 20, gender: 'male', city: 'Yangon'}
               person2.hobby = "sport";      
               person2.age = 30;
               console.log(person1);              // {name: 'Aung Aung', age: 30, gender: 'male', city: 'Yangon', hobby: 'sport'}
               console.log(person2);              // {name: 'Aung Aung', age: 30, gender: 'male', city: 'Yangon', hobby: 'sport'}
               
               - person2 addition and overwrite will effect person1

               let person3 = Object.freeze(person1);
               console.log(person3);              // {name: 'Aung Aung', age: 30, gender: 'male', city: 'Yangon', hobby: 'sport'}
               person3.phone = "0912345";
               person3.age = 40;
               console.log(person1);              // {name: 'Aung Aung', age: 30, gender: 'male', city: 'Yangon', hobby: 'sport'}
               console.log(person2);              // {name: 'Aung Aung', age: 30, gender: 'male', city: 'Yangon', hobby: 'sport'}
               console.log(person3);              // {name: 'Aung Aung', age: 30, gender: 'male', city: 'Yangon', hobby: 'sport'}
               console.log(person1.name);
               console.log(person1["name"]);
               
               - person3 addition and overwrite will not affect person1
               - person1 can't be made any modification, it is fix.
                    it can only output value.

          =>Object Destructuring
               const employees = {
                    name: "yu yu",
                    position: "graphic designer",
                    salary:500000
               };
               // console.log(employees.name);
               const {name,salary} = employees;
               console.log(name);
               console.log(salary);
               
               - multi variables declare at once to get object value
                    name = employee.name
                    salary = employee.salary
               - *variable name and object perperty must be same 
               - *can access desire properties from objects with variables 
               - variables are inside block

               --------------------------------------------------------------------

               const employers = {
                    fullname : "su su",
                    company : "abc co.,ltd",
                    location : "yangon",
                    posts : {
                         officestaff:{
                              gender:"female",
                              salary:600000
                         },
                         driver:{
                              gender:"male",
                              salary:300000
                         },
                    },
                    links:{
                         social:{
                              gmail : "admin@abc.com",
                              facebook:"https://faebook.com/abccompany"
                         }
                    }
               }
               // console.log(employers);
               const{fullname,company,posts} = employers;
               console.log(fullname); // su su
               console.log(company); // abc co.,ltd
               console.log(posts.officestaff.gender,posts["officestaff"]["salary"]); // female 600000
               console.log(posts.driver.gender,posts["driver"]["salary"]); // male 300000
               
               // -Object can hold every data types.
               // -Object can have nested objects. 

               // const {gmail,facebook} = employers.links.social;
               // console.log(gmail);
               // console.log(facebook);
               ---------------------------------------------------------------------
               function exchangerage(amount){
                    const rates = {
                         mmk: amount * 3000,
                         thb: amount * 40,
                         sgd: amount * 1.35
                    };
                    return rates;
               }   
               const currency = exchangerage(10); // 10usd
               console.log(currency);
               console.log(currency.mmk); // 30000
               console.log(currency.thb); // 400

               const {mmk,thb,sgd} = exchangerage(10);
               console.log(mmk); // 30000
               console.log(thb); // 400
               console.log(sgd); // 13.5

               =>Alias
                    const {gmail:letter,facebook:status} = employers.links.social;
                    // console.log(gmail); //  error l4objectliteral.html:96 Uncaught ReferenceError: gmail is not defined
                    // console.log(facebook); // error l4objectliteral.html:96 Uncaught ReferenceError: facebook is not defined
                    console.log(letter);
                    console.log(status);

               =>Default 
                    const configs = {
                         width:100,
                         color:"steelblue"
                    };

                    const {
                         width,
                         height = 500,
                         color = 'black',
                         margin = "10px"
                    } = configs;
                    console.log(width); // 100
                    console.log(color); // steelblue
                    console.log(height); // 500
                    console.log(margin); // 10px
                    
                    - default value of variable
                    - since it is variable it can define default value with = 
                    - object has property, get the property value
                    - object doesn't have property, get the default value
               
               =>Alias + Default
                    const {bg:background="white",p:padding="10px",flex:flexbox} = {bg:"black"};
                    // console.log(bg); // error
                    // console.log(p); // error
                    console.log(background); // black
                    console.log(padding); // 10px
                    // console.log(flex); // error
                    console.log(flexbox); // undefined

          =>Destructuring function parameters
               let obj = {
                    total:1000,
                    tax:5,
                    servicefee:100
               };
               function grandtotal1(objval){
                    const result = objval.total+(objval.total/objval.tax)+objval.servicefee;
                    return result;
               }
               console.log(grandtotal1(obj)); // 1300
               // console.log(grandtotal1()); // error -  because it retrieve property value from empty

               function grandtotal2(objval={}){
                    const result = objval.total+(objval.total/objval.tax)+objval.servicefee;
                    return result;
               }
               console.log(grandtotal2()); // NaN //  cause it is empty object
          
               
                    function grandtotal3({total,tax,servicefee}){
                         const result = total+(total/tax)+servicefee;
                         return result;
                    }
                    console.log(grandtotal3({total:2000,tax:5,servicefee:100})); // 2500
                    console.log(grandtotal3(obj)); // 1300
                    console.log(grandtotal3({total:2000,servicefee:100})); // NaN
                    
                    // 1. accept object as single parameter
                    // 2. define variable as from object

                    // const {total,tax,servicefee} = {total:2000,tax:5,servicefee:100};
                    // console.log(total);
                    // console.log(tax);
                    // console.log(servicefee);
                    // *can directly get object property 

               function grandtotal4({total=1000,tax=5,servicefee=100}){
                    const result = total+(total/tax)+servicefee;
                    return result;
               }
               console.log(grandtotal4({total:3000,tax:5,servicefee:100})); // 3700
               console.log(grandtotal4({total:3000,servicefee:200})); // 3800
               console.log(grandtotal4({servicefee:200})); // 1400
               // console.log(grandtotal4()); // error
               console.log(grandtotal4({})); // 1300
               // -default  variables
               //*need to pass an empty object

               function grandtotal5({total=1000,tax=5,servicefee=100}={}){
                    const result = total+(total/tax)+servicefee;
                    return result;
               }
               console.log(grandtotal5({total:3000,tax:5,servicefee:100})); // 3700
               console.log(grandtotal5({total:3000,servicefee:200})); // 3800
               console.log(grandtotal5()); // 1300
               // -default parameter and variable

